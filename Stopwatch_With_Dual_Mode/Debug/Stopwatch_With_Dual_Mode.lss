
Stopwatch_With_Dual_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002172  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006e  0080006e  00002214  2**0
                  ALLOC
  3 .stab         00001704  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009f5  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000045bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000070f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000828d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_1>
       8:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__vector_2>
       c:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 10 	call	0x2062	; 0x2062 <main>
      8a:	0c 94 b7 10 	jmp	0x216e	; 0x216e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
 * If it reach 1 minute the seconds counters will be reset and increase the first minute counter.
 * If it reach 1 hour the minutes counter and seconds counters will be reset and increase the first hour counter.
 * If it reach 23:59:59, it will be reset and start counting from 00:00:00.
 */
ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
	SREG |= 1<<I_BIT;				/* Enabling I bit. */
     b62:	af e5       	ldi	r26, 0x5F	; 95
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	ef e5       	ldi	r30, 0x5F	; 95
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8c 93       	st	X, r24

	/* If count down mode on. */
	if(mode_flag)
     b70:	80 91 74 00 	lds	r24, 0x0074
     b74:	88 23       	and	r24, r24
     b76:	09 f4       	brne	.+2      	; 0xb7a <__vector_7+0x34>
     b78:	76 c0       	rjmp	.+236    	; 0xc66 <__vector_7+0x120>
	{
		/* If it reach 00:00:00, buzzer will be on. */
		if(0 == hours_counter1 && 0 == hours_counter0 &&\
     b7a:	80 91 73 00 	lds	r24, 0x0073
     b7e:	88 23       	and	r24, r24
     b80:	e1 f4       	brne	.+56     	; 0xbba <__vector_7+0x74>
     b82:	80 91 72 00 	lds	r24, 0x0072
     b86:	88 23       	and	r24, r24
     b88:	c1 f4       	brne	.+48     	; 0xbba <__vector_7+0x74>
     b8a:	80 91 71 00 	lds	r24, 0x0071
     b8e:	88 23       	and	r24, r24
     b90:	a1 f4       	brne	.+40     	; 0xbba <__vector_7+0x74>
     b92:	80 91 70 00 	lds	r24, 0x0070
     b96:	88 23       	and	r24, r24
     b98:	81 f4       	brne	.+32     	; 0xbba <__vector_7+0x74>
     b9a:	80 91 6f 00 	lds	r24, 0x006F
     b9e:	88 23       	and	r24, r24
     ba0:	61 f4       	brne	.+24     	; 0xbba <__vector_7+0x74>
     ba2:	80 91 6e 00 	lds	r24, 0x006E
     ba6:	88 23       	and	r24, r24
     ba8:	41 f4       	brne	.+16     	; 0xbba <__vector_7+0x74>
				0 == minutes_counter1 && 0 == minutes_counter0 &&\
				0 == seconds_counter1 && 0 == seconds_counter0)
		{
			PORTD |= 1<<PD0;		/* Turn on buzzer if it reach 00:00:00. */
     baa:	a2 e3       	ldi	r26, 0x32	; 50
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e2 e3       	ldi	r30, 0x32	; 50
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	be c0       	rjmp	.+380    	; 0xd36 <__vector_7+0x1f0>
		}

		/* Else it count down until zero. */
		else
		{
			PORTD &= ~(1<<PD0);		/* Turn off buzzer. */
     bba:	a2 e3       	ldi	r26, 0x32	; 50
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e2 e3       	ldi	r30, 0x32	; 50
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	8c 93       	st	X, r24

			/* If the first seconds seconds 7 segment reach to 0, it will reset to 9 and decrement again. */
			if(0 == seconds_counter0)
     bc8:	80 91 6e 00 	lds	r24, 0x006E
     bcc:	88 23       	and	r24, r24
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__vector_7+0x8c>
     bd0:	44 c0       	rjmp	.+136    	; 0xc5a <__vector_7+0x114>
			{
				seconds_counter0 = 9;
     bd2:	89 e0       	ldi	r24, 0x09	; 9
     bd4:	80 93 6e 00 	sts	0x006E, r24
				/* If the second seconds 7 segment reach to 0, it will reset to 5 and decrement again. */
				if(0 == seconds_counter1)
     bd8:	80 91 6f 00 	lds	r24, 0x006F
     bdc:	88 23       	and	r24, r24
     bde:	b9 f5       	brne	.+110    	; 0xc4e <__vector_7+0x108>
				{
					seconds_counter1 = 5;
     be0:	85 e0       	ldi	r24, 0x05	; 5
     be2:	80 93 6f 00 	sts	0x006F, r24
					/* If the first minutes 7 segment reach to 0, it will reset to 9 and decrement again. */
					if(0 == minutes_counter0)
     be6:	80 91 70 00 	lds	r24, 0x0070
     bea:	88 23       	and	r24, r24
     bec:	51 f5       	brne	.+84     	; 0xc42 <__vector_7+0xfc>
					{
						minutes_counter0 = 9;
     bee:	89 e0       	ldi	r24, 0x09	; 9
     bf0:	80 93 70 00 	sts	0x0070, r24
						/* If the second minutes 7 segment reach to 0, it will reset to 5 and decrement again. */
						if(0 == minutes_counter1)
     bf4:	80 91 71 00 	lds	r24, 0x0071
     bf8:	88 23       	and	r24, r24
     bfa:	e9 f4       	brne	.+58     	; 0xc36 <__vector_7+0xf0>
						{
							minutes_counter1 = 5;
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	80 93 71 00 	sts	0x0071, r24
							/* If the first hours 7 segment reach to 0, it will reset to 9 and decrement again. */
							if(0 == hours_counter0)
     c02:	80 91 72 00 	lds	r24, 0x0072
     c06:	88 23       	and	r24, r24
     c08:	81 f4       	brne	.+32     	; 0xc2a <__vector_7+0xe4>
							{
								hours_counter0 = 9;
     c0a:	89 e0       	ldi	r24, 0x09	; 9
     c0c:	80 93 72 00 	sts	0x0072, r24
								/* If the second hours 7 segment reach to 0, it will stay at 0 and decrement again. */
								if(0 == hours_counter1)
     c10:	80 91 73 00 	lds	r24, 0x0073
     c14:	88 23       	and	r24, r24
     c16:	19 f4       	brne	.+6      	; 0xc1e <__vector_7+0xd8>
								{
									hours_counter1 = 0;
     c18:	10 92 73 00 	sts	0x0073, r1
     c1c:	8c c0       	rjmp	.+280    	; 0xd36 <__vector_7+0x1f0>
								}
								else
								{
									hours_counter1--;
     c1e:	80 91 73 00 	lds	r24, 0x0073
     c22:	81 50       	subi	r24, 0x01	; 1
     c24:	80 93 73 00 	sts	0x0073, r24
     c28:	86 c0       	rjmp	.+268    	; 0xd36 <__vector_7+0x1f0>
								}
							}
							else
							{
								hours_counter0--;
     c2a:	80 91 72 00 	lds	r24, 0x0072
     c2e:	81 50       	subi	r24, 0x01	; 1
     c30:	80 93 72 00 	sts	0x0072, r24
     c34:	80 c0       	rjmp	.+256    	; 0xd36 <__vector_7+0x1f0>
							}
						}
						else
						{
							minutes_counter1--;
     c36:	80 91 71 00 	lds	r24, 0x0071
     c3a:	81 50       	subi	r24, 0x01	; 1
     c3c:	80 93 71 00 	sts	0x0071, r24
     c40:	7a c0       	rjmp	.+244    	; 0xd36 <__vector_7+0x1f0>
						}
					}
					else
					{
						minutes_counter0--;
     c42:	80 91 70 00 	lds	r24, 0x0070
     c46:	81 50       	subi	r24, 0x01	; 1
     c48:	80 93 70 00 	sts	0x0070, r24
     c4c:	74 c0       	rjmp	.+232    	; 0xd36 <__vector_7+0x1f0>
					}
				}
				else
				{
					seconds_counter1--;
     c4e:	80 91 6f 00 	lds	r24, 0x006F
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	80 93 6f 00 	sts	0x006F, r24
     c58:	6e c0       	rjmp	.+220    	; 0xd36 <__vector_7+0x1f0>
				}
			}
			else
			{
				seconds_counter0--;
     c5a:	80 91 6e 00 	lds	r24, 0x006E
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	80 93 6e 00 	sts	0x006E, r24
     c64:	68 c0       	rjmp	.+208    	; 0xd36 <__vector_7+0x1f0>
	}

	/* If count up mode is on, it will count until it reach 23:59:59 then reset. */
	else
	{
		PORTD &= ~(1<<PD0);			/* Turn off the buzzer. */
     c66:	a2 e3       	ldi	r26, 0x32	; 50
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e2 e3       	ldi	r30, 0x32	; 50
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8e 7f       	andi	r24, 0xFE	; 254
     c72:	8c 93       	st	X, r24

		/* If stop watch reach 23:59:59 which is 24 hour, it will reset. */
		if(2 == hours_counter1 && 3 == hours_counter0 && \
     c74:	80 91 73 00 	lds	r24, 0x0073
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	09 f5       	brne	.+66     	; 0xcbe <__vector_7+0x178>
     c7c:	80 91 72 00 	lds	r24, 0x0072
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	e9 f4       	brne	.+58     	; 0xcbe <__vector_7+0x178>
     c84:	80 91 71 00 	lds	r24, 0x0071
     c88:	85 30       	cpi	r24, 0x05	; 5
     c8a:	c9 f4       	brne	.+50     	; 0xcbe <__vector_7+0x178>
     c8c:	80 91 70 00 	lds	r24, 0x0070
     c90:	89 30       	cpi	r24, 0x09	; 9
     c92:	a9 f4       	brne	.+42     	; 0xcbe <__vector_7+0x178>
     c94:	80 91 6f 00 	lds	r24, 0x006F
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	89 f4       	brne	.+34     	; 0xcbe <__vector_7+0x178>
     c9c:	80 91 6e 00 	lds	r24, 0x006E
     ca0:	89 30       	cpi	r24, 0x09	; 9
     ca2:	69 f4       	brne	.+26     	; 0xcbe <__vector_7+0x178>
				5 == minutes_counter1 && 9 == minutes_counter0 && \
				5 == seconds_counter1 && 9 == seconds_counter0)
		{
			seconds_counter0 = 0;
     ca4:	10 92 6e 00 	sts	0x006E, r1
			seconds_counter1 = 0;
     ca8:	10 92 6f 00 	sts	0x006F, r1
			minutes_counter0 = 0;
     cac:	10 92 70 00 	sts	0x0070, r1
			minutes_counter1 = 0;
     cb0:	10 92 71 00 	sts	0x0071, r1
			hours_counter0 = 0;
     cb4:	10 92 72 00 	sts	0x0072, r1
			hours_counter1 = 0;
     cb8:	10 92 73 00 	sts	0x0073, r1
     cbc:	3c c0       	rjmp	.+120    	; 0xd36 <__vector_7+0x1f0>
		}
		else
		{
			seconds_counter0++;		/* Increasing 1 second in the first 7 segment. */
     cbe:	80 91 6e 00 	lds	r24, 0x006E
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 6e 00 	sts	0x006E, r24
			/* If the first seconds 7 segment reach 10, it will reset and increase the second seconds 7 segment. */
			if(10 == seconds_counter0)
     cc8:	80 91 6e 00 	lds	r24, 0x006E
     ccc:	8a 30       	cpi	r24, 0x0A	; 10
     cce:	99 f5       	brne	.+102    	; 0xd36 <__vector_7+0x1f0>
			{
				seconds_counter0 = 0;
     cd0:	10 92 6e 00 	sts	0x006E, r1
				seconds_counter1++;
     cd4:	80 91 6f 00 	lds	r24, 0x006F
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 93 6f 00 	sts	0x006F, r24
				/* If the second seconds 7 segment reach 6 which is 1 minute, it will reset and increase the first minutes 7 segment. */
				if(6 == seconds_counter1)
     cde:	80 91 6f 00 	lds	r24, 0x006F
     ce2:	86 30       	cpi	r24, 0x06	; 6
     ce4:	41 f5       	brne	.+80     	; 0xd36 <__vector_7+0x1f0>
				{
					seconds_counter1 = 0;
     ce6:	10 92 6f 00 	sts	0x006F, r1
					minutes_counter0++;
     cea:	80 91 70 00 	lds	r24, 0x0070
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 70 00 	sts	0x0070, r24
					/* If the first minutes 7 segment reach 10, it will reset and increase the second minutes 7 segment. */
					if(10 == minutes_counter0)
     cf4:	80 91 70 00 	lds	r24, 0x0070
     cf8:	8a 30       	cpi	r24, 0x0A	; 10
     cfa:	e9 f4       	brne	.+58     	; 0xd36 <__vector_7+0x1f0>
					{
						minutes_counter0 = 0;
     cfc:	10 92 70 00 	sts	0x0070, r1
						minutes_counter1++;
     d00:	80 91 71 00 	lds	r24, 0x0071
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	80 93 71 00 	sts	0x0071, r24
						/* If the second minutes 7 segment reach 6 which is 1 hour, it will reset and increase the first hours 7 segment. */
						if(6 == minutes_counter1)
     d0a:	80 91 71 00 	lds	r24, 0x0071
     d0e:	86 30       	cpi	r24, 0x06	; 6
     d10:	91 f4       	brne	.+36     	; 0xd36 <__vector_7+0x1f0>
						{
							minutes_counter1 = 0;
     d12:	10 92 71 00 	sts	0x0071, r1
							hours_counter0++;
     d16:	80 91 72 00 	lds	r24, 0x0072
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 72 00 	sts	0x0072, r24
							/* If the first hours 7 segment reach 10, it will reset and increase the seconds hours 7 segment. */
							if(10 == hours_counter0)
     d20:	80 91 72 00 	lds	r24, 0x0072
     d24:	8a 30       	cpi	r24, 0x0A	; 10
     d26:	39 f4       	brne	.+14     	; 0xd36 <__vector_7+0x1f0>
							{
								hours_counter0 = 0;
     d28:	10 92 72 00 	sts	0x0072, r1
								hours_counter1++;
     d2c:	80 91 73 00 	lds	r24, 0x0073
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 73 00 	sts	0x0073, r24
					}
				}
			}
		}
	}
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	8f 91       	pop	r24
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_1>:

/* For resetting stop watch when falling edge detected. */
ISR(INT0_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	8f 93       	push	r24
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	SREG |= 1<<I_BIT;			/* Enabling I bit. */
     d6a:	af e5       	ldi	r26, 0x5F	; 95
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ef e5       	ldi	r30, 0x5F	; 95
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	8c 93       	st	X, r24

	/* Resetting all 7 segments. */
	seconds_counter0 = 0;
     d78:	10 92 6e 00 	sts	0x006E, r1
	seconds_counter1 = 0;
     d7c:	10 92 6f 00 	sts	0x006F, r1
	minutes_counter0 = 0;
     d80:	10 92 70 00 	sts	0x0070, r1
	minutes_counter1 = 0;
     d84:	10 92 71 00 	sts	0x0071, r1
	hours_counter0 = 0;
     d88:	10 92 72 00 	sts	0x0072, r1
	hours_counter1 = 0;
     d8c:	10 92 73 00 	sts	0x0073, r1
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	8f 91       	pop	r24
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_2>:

/* For pause stop watch when raising edge detected. */
ISR(INT1_vect)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	8f 93       	push	r24
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	SREG |= 1<<I_BIT;	/* Enabling I bit. */
     dc4:	af e5       	ldi	r26, 0x5F	; 95
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ef e5       	ldi	r30, 0x5F	; 95
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	8c 93       	st	X, r24

	/* Disable timer clock --> CS12 = 0, CS11 = 0, CS10 = 0. */
	TCCR1B &= ~(1<<CS12) & ~(1<<CS11) & ~(1<<CS10);
     dd2:	ae e4       	ldi	r26, 0x4E	; 78
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee e4       	ldi	r30, 0x4E	; 78
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 7f       	andi	r24, 0xF8	; 248
     dde:	8c 93       	st	X, r24
}
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	8f 91       	pop	r24
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_3>:

/* For resume stop watch when falling edge detected. */
ISR(INT2_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	8f 93       	push	r24
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	SREG |= 1<<I_BIT;	/* Enabling I bit. */
     e14:	af e5       	ldi	r26, 0x5F	; 95
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ef e5       	ldi	r30, 0x5F	; 95
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8c 93       	st	X, r24

	/* Enable timer clock --> CS12 = 0, CS10 = 0. */
	TCCR1B |= (1<<CS10) | (1<<CS12);
     e22:	ae e4       	ldi	r26, 0x4E	; 78
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ee e4       	ldi	r30, 0x4E	; 78
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	85 60       	ori	r24, 0x05	; 5
     e2e:	8c 93       	st	X, r24
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	8f 91       	pop	r24
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <timre1_init>:

/* Initializing timer1. */
void timre1_init(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * FOC1A --> Non PWM
	 * WGM12 --> CTC
	 * CS10 & CS12 --> CLK/1024
	 */
	TCCR1A = (1<<FOC1A);
     e50:	ef e4       	ldi	r30, 0x4F	; 79
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	88 e0       	ldi	r24, 0x08	; 8
     e56:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
     e58:	ee e4       	ldi	r30, 0x4E	; 78
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	8d e0       	ldi	r24, 0x0D	; 13
     e5e:	80 83       	st	Z, r24
	TCNT1 = 0;			/* Initial counter register with zero. */
     e60:	ec e4       	ldi	r30, 0x4C	; 76
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	11 82       	std	Z+1, r1	; 0x01
     e66:	10 82       	st	Z, r1
	OCR1A = 15625;		/* Making interrupt in 1s */
     e68:	ea e4       	ldi	r30, 0x4A	; 74
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	9d e3       	ldi	r25, 0x3D	; 61
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
	TIMSK |= 1<<OCIE1A;	/* Enabling interrupt module. */
     e74:	a9 e5       	ldi	r26, 0x59	; 89
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e9 e5       	ldi	r30, 0x59	; 89
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	8c 93       	st	X, r24
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <int0_reset_init>:

/* Initializing INT0 */
void int0_reset_init(void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Falling edge --> ISC00 = 0, ISC01 = 1.
	 * Enabling module interrupt --> INT0.
	 */
	MCUCR |= 1<<ISC01;
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	8c 93       	st	X, r24
	GICR |= 1<<INT0;
     e9e:	ab e5       	ldi	r26, 0x5B	; 91
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e5       	ldi	r30, 0x5B	; 91
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	8c 93       	st	X, r24
}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <int1_pause_init>:

/* Initializing INT1 */
void int1_pause_init(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Raising edge --> ISC10 = 1, ISC11 = 1.
	 * Enabling module interrupt --> INT1.
	 */
	MCUCR |= (1<<ISC10) | (1<<ISC11);
     eba:	a5 e5       	ldi	r26, 0x55	; 85
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e5 e5       	ldi	r30, 0x55	; 85
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8c 60       	ori	r24, 0x0C	; 12
     ec6:	8c 93       	st	X, r24
	GICR |= 1<<INT1;
     ec8:	ab e5       	ldi	r26, 0x5B	; 91
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e5       	ldi	r30, 0x5B	; 91
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <int2_resume_init>:

/* Initializing INT2 */
void int2_resume_init(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Falling edge --> ISC2 = 0.
	 * Enabling module interrupt --> INT2.
	 */
	GICR |= 1<<INT2;
     ee4:	ab e5       	ldi	r26, 0x5B	; 91
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e5       	ldi	r30, 0x5B	; 91
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	8c 93       	st	X, r24
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <increment_hours>:

/* For incrementing hours using button. */
void increment_hours(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	2e 97       	sbiw	r28, 0x0e	; 14
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB1)))
     f0c:	e6 e3       	ldi	r30, 0x36	; 54
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	82 70       	andi	r24, 0x02	; 2
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	09 f0       	breq	.+2      	; 0xf20 <increment_hours+0x28>
     f1e:	9f c0       	rjmp	.+318    	; 0x105e <increment_hours+0x166>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 ef       	ldi	r26, 0xF0	; 240
     f26:	b1 e4       	ldi	r27, 0x41	; 65
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	9c 87       	std	Y+12, r25	; 0x0c
     f2c:	ad 87       	std	Y+13, r26	; 0x0d
     f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	6b 85       	ldd	r22, Y+11	; 0x0b
     f32:	7c 85       	ldd	r23, Y+12	; 0x0c
     f34:	8d 85       	ldd	r24, Y+13	; 0x0d
     f36:	9e 85       	ldd	r25, Y+14	; 0x0e
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	55 e4       	ldi	r21, 0x45	; 69
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8f 83       	std	Y+7, r24	; 0x07
     f4a:	98 87       	std	Y+8, r25	; 0x08
     f4c:	a9 87       	std	Y+9, r26	; 0x09
     f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <increment_hours+0x7a>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <increment_hours+0xf8>
	else if (__tmp > 65535)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <increment_hours+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <increment_hours+0xda>
     fb4:	80 e9       	ldi	r24, 0x90	; 144
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <increment_hours+0xc8>
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <increment_hours+0xbc>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <increment_hours+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <increment_hours+0x104>
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!((PINB & (1<<PB1))) && (increment_hours_flag))
    1004:	e6 e3       	ldi	r30, 0x36	; 54
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	82 70       	andi	r24, 0x02	; 2
    1010:	90 70       	andi	r25, 0x00	; 0
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	39 f5       	brne	.+78     	; 0x1064 <increment_hours+0x16c>
    1016:	80 91 68 00 	lds	r24, 0x0068
    101a:	88 23       	and	r24, r24
    101c:	19 f1       	breq	.+70     	; 0x1064 <increment_hours+0x16c>
		{
			increment_hours_flag = 0;		/* Resetting flag to increment with one click only. */
    101e:	10 92 68 00 	sts	0x0068, r1
			/*
			 * Increase the first hours 7 segment,
			 * If it reach 24 it will reset.
			 */
			hours_counter0++;
    1022:	80 91 72 00 	lds	r24, 0x0072
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 72 00 	sts	0x0072, r24
			if(4 == hours_counter0 && 2 == hours_counter1)
    102c:	80 91 72 00 	lds	r24, 0x0072
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	49 f4       	brne	.+18     	; 0x1046 <increment_hours+0x14e>
    1034:	80 91 73 00 	lds	r24, 0x0073
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	29 f4       	brne	.+10     	; 0x1046 <increment_hours+0x14e>
			{
				hours_counter0 = 0;
    103c:	10 92 72 00 	sts	0x0072, r1
				hours_counter1 = 0;
    1040:	10 92 73 00 	sts	0x0073, r1
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <increment_hours+0x16c>
			}
			else if(10 == hours_counter0)
    1046:	80 91 72 00 	lds	r24, 0x0072
    104a:	8a 30       	cpi	r24, 0x0A	; 10
    104c:	59 f4       	brne	.+22     	; 0x1064 <increment_hours+0x16c>
			{
				hours_counter0 = 0;
    104e:	10 92 72 00 	sts	0x0072, r1
				hours_counter1++;
    1052:	80 91 73 00 	lds	r24, 0x0073
    1056:	8f 5f       	subi	r24, 0xFF	; 255
    1058:	80 93 73 00 	sts	0x0073, r24
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <increment_hours+0x16c>
			}
		}
	}
	else
	{
		increment_hours_flag = 1;		/* Resetting flag into 1 if push button released. */
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 68 00 	sts	0x0068, r24
	}
}
    1064:	2e 96       	adiw	r28, 0x0e	; 14
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <decrement_hours>:

/* For decrementing hours using button. */
void decrement_hours(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	2e 97       	sbiw	r28, 0x0e	; 14
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB0)))
    108a:	e6 e3       	ldi	r30, 0x36	; 54
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	09 f0       	breq	.+2      	; 0x109e <decrement_hours+0x28>
    109c:	a3 c0       	rjmp	.+326    	; 0x11e4 <decrement_hours+0x16e>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 ef       	ldi	r26, 0xF0	; 240
    10a4:	b1 e4       	ldi	r27, 0x41	; 65
    10a6:	8b 87       	std	Y+11, r24	; 0x0b
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	ad 87       	std	Y+13, r26	; 0x0d
    10ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a e7       	ldi	r20, 0x7A	; 122
    10bc:	55 e4       	ldi	r21, 0x45	; 69
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	a9 87       	std	Y+9, r26	; 0x09
    10cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <decrement_hours+0x7a>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <decrement_hours+0xf8>
	else if (__tmp > 65535)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <decrement_hours+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <decrement_hours+0xda>
    1132:	80 e9       	ldi	r24, 0x90	; 144
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <decrement_hours+0xc8>
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <decrement_hours+0xbc>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <decrement_hours+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <decrement_hours+0x104>
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!(PINB & (1<<PB0)) && (decrement_hours_flag))
    1182:	e6 e3       	ldi	r30, 0x36	; 54
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	59 f5       	brne	.+86     	; 0x11ea <decrement_hours+0x174>
    1194:	80 91 69 00 	lds	r24, 0x0069
    1198:	88 23       	and	r24, r24
    119a:	39 f1       	breq	.+78     	; 0x11ea <decrement_hours+0x174>
		{
			decrement_hours_flag = 0;		/* Resetting flag to increment with one click only. */
    119c:	10 92 69 00 	sts	0x0069, r1
			/*
			 * If hours reach zero, go back to 23.
			 * If the first hours 7 segment reach 0 it will reset to 9 and decrement the next hours 7 segment.
			 * Else, it is decrementing the first hours 7 segment.
			 */
			if(0 == hours_counter1 && 0 == hours_counter0)
    11a0:	80 91 73 00 	lds	r24, 0x0073
    11a4:	88 23       	and	r24, r24
    11a6:	59 f4       	brne	.+22     	; 0x11be <decrement_hours+0x148>
    11a8:	80 91 72 00 	lds	r24, 0x0072
    11ac:	88 23       	and	r24, r24
    11ae:	39 f4       	brne	.+14     	; 0x11be <decrement_hours+0x148>
			{
				hours_counter0 = 3;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	80 93 72 00 	sts	0x0072, r24
				hours_counter1 = 2;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	80 93 73 00 	sts	0x0073, r24
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <decrement_hours+0x174>
			}
			else if(0 == hours_counter0)
    11be:	80 91 72 00 	lds	r24, 0x0072
    11c2:	88 23       	and	r24, r24
    11c4:	49 f4       	brne	.+18     	; 0x11d8 <decrement_hours+0x162>
			{
				hours_counter0 = 9;
    11c6:	89 e0       	ldi	r24, 0x09	; 9
    11c8:	80 93 72 00 	sts	0x0072, r24
				hours_counter1--;
    11cc:	80 91 73 00 	lds	r24, 0x0073
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	80 93 73 00 	sts	0x0073, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <decrement_hours+0x174>
			}
			else
			{
				hours_counter0--;
    11d8:	80 91 72 00 	lds	r24, 0x0072
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	80 93 72 00 	sts	0x0072, r24
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <decrement_hours+0x174>
			}
		}
	}
	else
	{
		decrement_hours_flag = 1;		/* Resetting flag into 1 if push button released. */
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 69 00 	sts	0x0069, r24
	}
}
    11ea:	2e 96       	adiw	r28, 0x0e	; 14
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <increment_minutes>:

/* For incrementing minutes using button. */
void increment_minutes(void)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	2e 97       	sbiw	r28, 0x0e	; 14
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB4)))
    1210:	e6 e3       	ldi	r30, 0x36	; 54
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	80 71       	andi	r24, 0x10	; 16
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	09 f0       	breq	.+2      	; 0x1224 <increment_minutes+0x28>
    1222:	98 c0       	rjmp	.+304    	; 0x1354 <increment_minutes+0x158>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a0 ef       	ldi	r26, 0xF0	; 240
    122a:	b1 e4       	ldi	r27, 0x41	; 65
    122c:	8b 87       	std	Y+11, r24	; 0x0b
    122e:	9c 87       	std	Y+12, r25	; 0x0c
    1230:	ad 87       	std	Y+13, r26	; 0x0d
    1232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6b 85       	ldd	r22, Y+11	; 0x0b
    1236:	7c 85       	ldd	r23, Y+12	; 0x0c
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a e7       	ldi	r20, 0x7A	; 122
    1242:	55 e4       	ldi	r21, 0x45	; 69
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8f 83       	std	Y+7, r24	; 0x07
    124e:	98 87       	std	Y+8, r25	; 0x08
    1250:	a9 87       	std	Y+9, r26	; 0x09
    1252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <increment_minutes+0x7a>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <increment_minutes+0xf8>
	else if (__tmp > 65535)
    1276:	6f 81       	ldd	r22, Y+7	; 0x07
    1278:	78 85       	ldd	r23, Y+8	; 0x08
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <increment_minutes+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <increment_minutes+0xda>
    12b8:	80 e9       	ldi	r24, 0x90	; 144
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <increment_minutes+0xc8>
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <increment_minutes+0xbc>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <increment_minutes+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <increment_minutes+0x104>
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!((PINB & (1<<PB4))) && (increment_minutes_flag))
    1308:	e6 e3       	ldi	r30, 0x36	; 54
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	80 71       	andi	r24, 0x10	; 16
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	01 f5       	brne	.+64     	; 0x135a <increment_minutes+0x15e>
    131a:	80 91 6a 00 	lds	r24, 0x006A
    131e:	88 23       	and	r24, r24
    1320:	e1 f0       	breq	.+56     	; 0x135a <increment_minutes+0x15e>
		{
			increment_minutes_flag = 0;		/* Resetting flag to increment with one click only. */
    1322:	10 92 6a 00 	sts	0x006A, r1
			/*
			 * Increase the first minutes 7 segment.
			 * If it reach 59 it will reset.
			 */
			minutes_counter0++;
    1326:	80 91 70 00 	lds	r24, 0x0070
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	80 93 70 00 	sts	0x0070, r24
			if(10 == minutes_counter0)
    1330:	80 91 70 00 	lds	r24, 0x0070
    1334:	8a 30       	cpi	r24, 0x0A	; 10
    1336:	89 f4       	brne	.+34     	; 0x135a <increment_minutes+0x15e>
			{
				minutes_counter0 = 0;
    1338:	10 92 70 00 	sts	0x0070, r1
				minutes_counter1++;
    133c:	80 91 71 00 	lds	r24, 0x0071
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	80 93 71 00 	sts	0x0071, r24
				if(6 == minutes_counter1)
    1346:	80 91 71 00 	lds	r24, 0x0071
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	31 f4       	brne	.+12     	; 0x135a <increment_minutes+0x15e>
				{
					minutes_counter1 = 0;
    134e:	10 92 71 00 	sts	0x0071, r1
    1352:	03 c0       	rjmp	.+6      	; 0x135a <increment_minutes+0x15e>
			}
		}
	}
	else
	{
		increment_minutes_flag = 1;		/* Resetting flag into 1 if push button released. */
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 6a 00 	sts	0x006A, r24
	}
}
    135a:	2e 96       	adiw	r28, 0x0e	; 14
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <decrement_minutes>:

/* For decrementing minutes using button. */
void decrement_minutes(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2e 97       	sbiw	r28, 0x0e	; 14
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB3)))
    1380:	e6 e3       	ldi	r30, 0x36	; 54
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	88 70       	andi	r24, 0x08	; 8
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	09 f0       	breq	.+2      	; 0x1394 <decrement_minutes+0x28>
    1392:	a3 c0       	rjmp	.+326    	; 0x14da <decrement_minutes+0x16e>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 ef       	ldi	r26, 0xF0	; 240
    139a:	b1 e4       	ldi	r27, 0x41	; 65
    139c:	8b 87       	std	Y+11, r24	; 0x0b
    139e:	9c 87       	std	Y+12, r25	; 0x0c
    13a0:	ad 87       	std	Y+13, r26	; 0x0d
    13a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a e7       	ldi	r20, 0x7A	; 122
    13b2:	55 e4       	ldi	r21, 0x45	; 69
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8f 83       	std	Y+7, r24	; 0x07
    13be:	98 87       	std	Y+8, r25	; 0x08
    13c0:	a9 87       	std	Y+9, r26	; 0x09
    13c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c4:	6f 81       	ldd	r22, Y+7	; 0x07
    13c6:	78 85       	ldd	r23, Y+8	; 0x08
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d8:	88 23       	and	r24, r24
    13da:	2c f4       	brge	.+10     	; 0x13e6 <decrement_minutes+0x7a>
		__ticks = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <decrement_minutes+0xf8>
	else if (__tmp > 65535)
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	4c f5       	brge	.+82     	; 0x1450 <decrement_minutes+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1400:	7c 85       	ldd	r23, Y+12	; 0x0c
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	9e 85       	ldd	r25, Y+14	; 0x0e
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <decrement_minutes+0xda>
    1428:	80 e9       	ldi	r24, 0x90	; 144
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <decrement_minutes+0xc8>
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	69 f7       	brne	.-38     	; 0x1428 <decrement_minutes+0xbc>
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <decrement_minutes+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <decrement_minutes+0x104>
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!(PINB & (1<<PB3)) && (decrement_minutes_flag))
    1478:	e6 e3       	ldi	r30, 0x36	; 54
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	88 70       	andi	r24, 0x08	; 8
    1484:	90 70       	andi	r25, 0x00	; 0
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	59 f5       	brne	.+86     	; 0x14e0 <decrement_minutes+0x174>
    148a:	80 91 6b 00 	lds	r24, 0x006B
    148e:	88 23       	and	r24, r24
    1490:	39 f1       	breq	.+78     	; 0x14e0 <decrement_minutes+0x174>
		{
			decrement_minutes_flag = 0;		/* Resetting flag to increment with one click only. */
    1492:	10 92 6b 00 	sts	0x006B, r1
			/*
			 * If minute reach zero, do nothing.
			 * If the first minutes 7 segment reach 0 it will reset to 9 and decrement the next minutes 7 segment.
			 * Else, it is decrementing the first minutes 7 segment.
			 */
			if(0 == minutes_counter1 && 0 == minutes_counter0)
    1496:	80 91 71 00 	lds	r24, 0x0071
    149a:	88 23       	and	r24, r24
    149c:	59 f4       	brne	.+22     	; 0x14b4 <decrement_minutes+0x148>
    149e:	80 91 70 00 	lds	r24, 0x0070
    14a2:	88 23       	and	r24, r24
    14a4:	39 f4       	brne	.+14     	; 0x14b4 <decrement_minutes+0x148>
			{
				minutes_counter0 = 9;
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	80 93 70 00 	sts	0x0070, r24
				minutes_counter1 = 5;
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	80 93 71 00 	sts	0x0071, r24
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <decrement_minutes+0x174>
			}
			else if(0 == minutes_counter0)
    14b4:	80 91 70 00 	lds	r24, 0x0070
    14b8:	88 23       	and	r24, r24
    14ba:	49 f4       	brne	.+18     	; 0x14ce <decrement_minutes+0x162>
			{
				minutes_counter0 = 9;
    14bc:	89 e0       	ldi	r24, 0x09	; 9
    14be:	80 93 70 00 	sts	0x0070, r24
				minutes_counter1--;
    14c2:	80 91 71 00 	lds	r24, 0x0071
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	80 93 71 00 	sts	0x0071, r24
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <decrement_minutes+0x174>
			}
			else
			{
				minutes_counter0--;
    14ce:	80 91 70 00 	lds	r24, 0x0070
    14d2:	81 50       	subi	r24, 0x01	; 1
    14d4:	80 93 70 00 	sts	0x0070, r24
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <decrement_minutes+0x174>
			}
		}
	}
	else
	{
		decrement_minutes_flag = 1;		/* Resetting flag into 1 if push button released. */
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	80 93 6b 00 	sts	0x006B, r24
	}
}
    14e0:	2e 96       	adiw	r28, 0x0e	; 14
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <increment_seconds>:

/* For incrementing seconds using button. */
void increment_seconds(void)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2e 97       	sbiw	r28, 0x0e	; 14
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB6)))
    1506:	e6 e3       	ldi	r30, 0x36	; 54
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	80 74       	andi	r24, 0x40	; 64
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	09 f0       	breq	.+2      	; 0x151a <increment_seconds+0x28>
    1518:	98 c0       	rjmp	.+304    	; 0x164a <increment_seconds+0x158>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 ef       	ldi	r26, 0xF0	; 240
    1520:	b1 e4       	ldi	r27, 0x41	; 65
    1522:	8b 87       	std	Y+11, r24	; 0x0b
    1524:	9c 87       	std	Y+12, r25	; 0x0c
    1526:	ad 87       	std	Y+13, r26	; 0x0d
    1528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	6b 85       	ldd	r22, Y+11	; 0x0b
    152c:	7c 85       	ldd	r23, Y+12	; 0x0c
    152e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1530:	9e 85       	ldd	r25, Y+14	; 0x0e
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	4a e7       	ldi	r20, 0x7A	; 122
    1538:	55 e4       	ldi	r21, 0x45	; 69
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	8f 83       	std	Y+7, r24	; 0x07
    1544:	98 87       	std	Y+8, r25	; 0x08
    1546:	a9 87       	std	Y+9, r26	; 0x09
    1548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e8       	ldi	r20, 0x80	; 128
    1558:	5f e3       	ldi	r21, 0x3F	; 63
    155a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155e:	88 23       	and	r24, r24
    1560:	2c f4       	brge	.+10     	; 0x156c <increment_seconds+0x7a>
		__ticks = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <increment_seconds+0xf8>
	else if (__tmp > 65535)
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	57 e4       	ldi	r21, 0x47	; 71
    157c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1580:	18 16       	cp	r1, r24
    1582:	4c f5       	brge	.+82     	; 0x15d6 <increment_seconds+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e2       	ldi	r20, 0x20	; 32
    1592:	51 e4       	ldi	r21, 0x41	; 65
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <increment_seconds+0xda>
    15ae:	80 e9       	ldi	r24, 0x90	; 144
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	8b 83       	std	Y+3, r24	; 0x03
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <increment_seconds+0xc8>
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	69 f7       	brne	.-38     	; 0x15ae <increment_seconds+0xbc>
    15d4:	14 c0       	rjmp	.+40     	; 0x15fe <increment_seconds+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d6:	6f 81       	ldd	r22, Y+7	; 0x07
    15d8:	78 85       	ldd	r23, Y+8	; 0x08
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <increment_seconds+0x104>
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!((PINB & (1<<PB6))) && (increment_seconds_flag))
    15fe:	e6 e3       	ldi	r30, 0x36	; 54
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	80 74       	andi	r24, 0x40	; 64
    160a:	90 70       	andi	r25, 0x00	; 0
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	01 f5       	brne	.+64     	; 0x1650 <increment_seconds+0x15e>
    1610:	80 91 6c 00 	lds	r24, 0x006C
    1614:	88 23       	and	r24, r24
    1616:	e1 f0       	breq	.+56     	; 0x1650 <increment_seconds+0x15e>
		{
			increment_seconds_flag = 0;		/* Resetting flag to increment with one click only. */
    1618:	10 92 6c 00 	sts	0x006C, r1
			/*
			 * Increase the first minutes 7 segment.
			 * if it reach 59 it will reset.
			 */
			seconds_counter0++;
    161c:	80 91 6e 00 	lds	r24, 0x006E
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	80 93 6e 00 	sts	0x006E, r24
			if(10 == seconds_counter0)
    1626:	80 91 6e 00 	lds	r24, 0x006E
    162a:	8a 30       	cpi	r24, 0x0A	; 10
    162c:	89 f4       	brne	.+34     	; 0x1650 <increment_seconds+0x15e>
			{
				seconds_counter0 = 0;
    162e:	10 92 6e 00 	sts	0x006E, r1
				seconds_counter1++;
    1632:	80 91 6f 00 	lds	r24, 0x006F
    1636:	8f 5f       	subi	r24, 0xFF	; 255
    1638:	80 93 6f 00 	sts	0x006F, r24
				if(6 == seconds_counter1)
    163c:	80 91 6f 00 	lds	r24, 0x006F
    1640:	86 30       	cpi	r24, 0x06	; 6
    1642:	31 f4       	brne	.+12     	; 0x1650 <increment_seconds+0x15e>
				{
					seconds_counter1 = 0;
    1644:	10 92 6f 00 	sts	0x006F, r1
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <increment_seconds+0x15e>
			}
		}
	}
	else
	{
		increment_seconds_flag = 1;		/* Resetting flag into 1 if push button released. */
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1650:	2e 96       	adiw	r28, 0x0e	; 14
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <decrement_seconds>:

/* For decrementing minutes using button. */
void decrement_seconds(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	2e 97       	sbiw	r28, 0x0e	; 14
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB5)))
    1676:	e6 e3       	ldi	r30, 0x36	; 54
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	80 72       	andi	r24, 0x20	; 32
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	09 f0       	breq	.+2      	; 0x168a <decrement_seconds+0x28>
    1688:	a3 c0       	rjmp	.+326    	; 0x17d0 <decrement_seconds+0x16e>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 ef       	ldi	r26, 0xF0	; 240
    1690:	b1 e4       	ldi	r27, 0x41	; 65
    1692:	8b 87       	std	Y+11, r24	; 0x0b
    1694:	9c 87       	std	Y+12, r25	; 0x0c
    1696:	ad 87       	std	Y+13, r26	; 0x0d
    1698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	55 e4       	ldi	r21, 0x45	; 69
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8f 83       	std	Y+7, r24	; 0x07
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	a9 87       	std	Y+9, r26	; 0x09
    16b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <decrement_seconds+0x7a>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	3f c0       	rjmp	.+126    	; 0x175a <decrement_seconds+0xf8>
	else if (__tmp > 65535)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <decrement_seconds+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	0f c0       	rjmp	.+30     	; 0x173c <decrement_seconds+0xda>
    171e:	80 e9       	ldi	r24, 0x90	; 144
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <decrement_seconds+0xc8>
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <decrement_seconds+0xbc>
    1744:	14 c0       	rjmp	.+40     	; 0x176e <decrement_seconds+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <decrement_seconds+0x104>
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);				/* For de-bouncing. */
		if(!(PINB & (1<<PB5)) && (decrement_seconds_flag))
    176e:	e6 e3       	ldi	r30, 0x36	; 54
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	80 72       	andi	r24, 0x20	; 32
    177a:	90 70       	andi	r25, 0x00	; 0
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	59 f5       	brne	.+86     	; 0x17d6 <decrement_seconds+0x174>
    1780:	80 91 6d 00 	lds	r24, 0x006D
    1784:	88 23       	and	r24, r24
    1786:	39 f1       	breq	.+78     	; 0x17d6 <decrement_seconds+0x174>
		{
			decrement_seconds_flag = 0;		/* Resetting flag to increment with one click only. */
    1788:	10 92 6d 00 	sts	0x006D, r1
			/*
			 * If minute reach zero, do nothing.
			 * If the first minutes 7 segment reach 0 it will reset to 9 and decrement the second minutes 7 segment.
			 * Else, it is decrementing the first minutes 7 segment.
			 */
			if(0 == seconds_counter1 && 0 == seconds_counter0)
    178c:	80 91 6f 00 	lds	r24, 0x006F
    1790:	88 23       	and	r24, r24
    1792:	59 f4       	brne	.+22     	; 0x17aa <decrement_seconds+0x148>
    1794:	80 91 6e 00 	lds	r24, 0x006E
    1798:	88 23       	and	r24, r24
    179a:	39 f4       	brne	.+14     	; 0x17aa <decrement_seconds+0x148>
			{
				seconds_counter0 = 9;
    179c:	89 e0       	ldi	r24, 0x09	; 9
    179e:	80 93 6e 00 	sts	0x006E, r24
				seconds_counter1 = 5;
    17a2:	85 e0       	ldi	r24, 0x05	; 5
    17a4:	80 93 6f 00 	sts	0x006F, r24
    17a8:	16 c0       	rjmp	.+44     	; 0x17d6 <decrement_seconds+0x174>
			}
			else if(0 == seconds_counter0)
    17aa:	80 91 6e 00 	lds	r24, 0x006E
    17ae:	88 23       	and	r24, r24
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <decrement_seconds+0x162>
			{
				seconds_counter0 = 9;
    17b2:	89 e0       	ldi	r24, 0x09	; 9
    17b4:	80 93 6e 00 	sts	0x006E, r24
				seconds_counter1--;
    17b8:	80 91 6f 00 	lds	r24, 0x006F
    17bc:	81 50       	subi	r24, 0x01	; 1
    17be:	80 93 6f 00 	sts	0x006F, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <decrement_seconds+0x174>
			}
			else
			{
				seconds_counter0--;
    17c4:	80 91 6e 00 	lds	r24, 0x006E
    17c8:	81 50       	subi	r24, 0x01	; 1
    17ca:	80 93 6e 00 	sts	0x006E, r24
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <decrement_seconds+0x174>
			}
		}
	}
	else
	{
		decrement_seconds_flag = 1;		/* Resetting flag into 1 if push button released. */
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 6d 00 	sts	0x006D, r24
	}
}
    17d6:	2e 96       	adiw	r28, 0x0e	; 14
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <mode_toggle>:

/* For toggle the mode and the 2 LEDs */
void mode_toggle(void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	2e 97       	sbiw	r28, 0x0e	; 14
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB7)))
    17fc:	e6 e3       	ldi	r30, 0x36	; 54
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	88 23       	and	r24, r24
    1804:	0c f4       	brge	.+2      	; 0x1808 <mode_toggle+0x20>
    1806:	89 c0       	rjmp	.+274    	; 0x191a <mode_toggle+0x132>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 ef       	ldi	r26, 0xF0	; 240
    180e:	b1 e4       	ldi	r27, 0x41	; 65
    1810:	8b 87       	std	Y+11, r24	; 0x0b
    1812:	9c 87       	std	Y+12, r25	; 0x0c
    1814:	ad 87       	std	Y+13, r26	; 0x0d
    1816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	6b 85       	ldd	r22, Y+11	; 0x0b
    181a:	7c 85       	ldd	r23, Y+12	; 0x0c
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a e7       	ldi	r20, 0x7A	; 122
    1826:	55 e4       	ldi	r21, 0x45	; 69
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8f 83       	std	Y+7, r24	; 0x07
    1832:	98 87       	std	Y+8, r25	; 0x08
    1834:	a9 87       	std	Y+9, r26	; 0x09
    1836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <mode_toggle+0x72>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <mode_toggle+0xf0>
	else if (__tmp > 65535)
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <mode_toggle+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <mode_toggle+0xd2>
    189c:	80 e9       	ldi	r24, 0x90	; 144
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <mode_toggle+0xc0>
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <mode_toggle+0xb4>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <mode_toggle+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9e 83       	std	Y+6, r25	; 0x06
    18d6:	8d 83       	std	Y+5, r24	; 0x05
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <mode_toggle+0xfc>
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);
		if(!(PINB & (1<<PB7)))
    18ec:	e6 e3       	ldi	r30, 0x36	; 54
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 23       	and	r24, r24
    18f4:	14 f1       	brlt	.+68     	; 0x193a <mode_toggle+0x152>
		{
			mode_flag = 1;			/* Set flag to enable decrement mode. */
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 74 00 	sts	0x0074, r24
			PORTD |= 1<<PD5;		/* Turn ON increment LED. */
    18fc:	a2 e3       	ldi	r26, 0x32	; 50
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e2 e3       	ldi	r30, 0x32	; 50
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 62       	ori	r24, 0x20	; 32
    1908:	8c 93       	st	X, r24
			PORTD &= ~(1<<PD4);		/* Turn OFF decrement LED. */
    190a:	a2 e3       	ldi	r26, 0x32	; 50
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 7e       	andi	r24, 0xEF	; 239
    1916:	8c 93       	st	X, r24
    1918:	10 c0       	rjmp	.+32     	; 0x193a <mode_toggle+0x152>
		}
	}
	else
	{
		mode_flag = 0;				/* Reset flag to enable decrement mode. */
    191a:	10 92 74 00 	sts	0x0074, r1
		PORTD &= ~(1<<PD5);			/* Turn OFF increment LED. */
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8f 7d       	andi	r24, 0xDF	; 223
    192a:	8c 93       	st	X, r24
		PORTD |= 1<<PD4;			/* Turn OFF decrement LED. */
    192c:	a2 e3       	ldi	r26, 0x32	; 50
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e2 e3       	ldi	r30, 0x32	; 50
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 61       	ori	r24, 0x10	; 16
    1938:	8c 93       	st	X, r24
	}
}
    193a:	2e 96       	adiw	r28, 0x0e	; 14
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <lightning_7segments_in_parallel>:

/* For keeping 7 segments on all time. */
void lightning_7segments_in_parallel(void)
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	c4 55       	subi	r28, 0x54	; 84
    195a:	d0 40       	sbci	r29, 0x00	; 0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
	PORTA = (PORTA & 0xC0) | 1<<PA5;				/* Open the 7 segment for secounds_counter0. */
    1966:	ab e3       	ldi	r26, 0x3B	; 59
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	eb e3       	ldi	r30, 0x3B	; 59
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 7c       	andi	r24, 0xC0	; 192
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | seconds_counter0;		/* Increasing the counter and display it. */
    1976:	a5 e3       	ldi	r26, 0x35	; 53
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e3       	ldi	r30, 0x35	; 53
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	98 2f       	mov	r25, r24
    1982:	90 7f       	andi	r25, 0xF0	; 240
    1984:	80 91 6e 00 	lds	r24, 0x006E
    1988:	89 2b       	or	r24, r25
    198a:	8c 93       	st	X, r24
    198c:	fe 01       	movw	r30, r28
    198e:	ef 5a       	subi	r30, 0xAF	; 175
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e4       	ldi	r27, 0x40	; 64
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	8e 01       	movw	r16, r28
    19a4:	03 5b       	subi	r16, 0xB3	; 179
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 5a       	subi	r30, 0xAF	; 175
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	55 e4       	ldi	r21, 0x45	; 69
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	a2 83       	std	Z+2, r26	; 0x02
    19ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 5b       	subi	r30, 0xB3	; 179
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	44 f4       	brge	.+16     	; 0x19fe <lightning_7segments_in_parallel+0xb2>
		__ticks = 1;
    19ee:	fe 01       	movw	r30, r28
    19f0:	e5 5b       	subi	r30, 0xB5	; 181
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	64 c0       	rjmp	.+200    	; 0x1ac6 <lightning_7segments_in_parallel+0x17a>
	else if (__tmp > 65535)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e3 5b       	subi	r30, 0xB3	; 179
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	0c f0       	brlt	.+2      	; 0x1a1e <lightning_7segments_in_parallel+0xd2>
    1a1c:	43 c0       	rjmp	.+134    	; 0x1aa4 <lightning_7segments_in_parallel+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ef 5a       	subi	r30, 0xAF	; 175
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	05 5b       	subi	r16, 0xB5	; 181
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	f8 01       	movw	r30, r16
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
    1a54:	1f c0       	rjmp	.+62     	; 0x1a94 <lightning_7segments_in_parallel+0x148>
    1a56:	fe 01       	movw	r30, r28
    1a58:	e7 5b       	subi	r30, 0xB7	; 183
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e9       	ldi	r24, 0x90	; 144
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	e7 5b       	subi	r30, 0xB7	; 183
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <lightning_7segments_in_parallel+0x122>
    1a72:	fe 01       	movw	r30, r28
    1a74:	e7 5b       	subi	r30, 0xB7	; 183
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	de 01       	movw	r26, r28
    1a7e:	a5 5b       	subi	r26, 0xB5	; 181
    1a80:	bf 4f       	sbci	r27, 0xFF	; 255
    1a82:	fe 01       	movw	r30, r28
    1a84:	e5 5b       	subi	r30, 0xB5	; 181
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	fe 01       	movw	r30, r28
    1a96:	e5 5b       	subi	r30, 0xB5	; 181
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	d1 f6       	brne	.-76     	; 0x1a56 <lightning_7segments_in_parallel+0x10a>
    1aa2:	27 c0       	rjmp	.+78     	; 0x1af2 <lightning_7segments_in_parallel+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	05 5b       	subi	r16, 0xB5	; 181
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e3 5b       	subi	r30, 0xB3	; 179
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
    1ac6:	de 01       	movw	r26, r28
    1ac8:	a9 5b       	subi	r26, 0xB9	; 185
    1aca:	bf 4f       	sbci	r27, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	e5 5b       	subi	r30, 0xB5	; 181
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	8d 93       	st	X+, r24
    1ad8:	9c 93       	st	X, r25
    1ada:	fe 01       	movw	r30, r28
    1adc:	e9 5b       	subi	r30, 0xB9	; 185
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <lightning_7segments_in_parallel+0x198>
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e9 5b       	subi	r30, 0xB9	; 185
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */

	PORTA = (PORTA & 0xC0) | 1<<PA4;				/* Open the 7 segment for secounds_counter1. */
    1af2:	ab e3       	ldi	r26, 0x3B	; 59
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e3       	ldi	r30, 0x3B	; 59
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 7c       	andi	r24, 0xC0	; 192
    1afe:	80 61       	ori	r24, 0x10	; 16
    1b00:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | seconds_counter1;		/* Increasing the counter and display it. */
    1b02:	a5 e3       	ldi	r26, 0x35	; 53
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e3       	ldi	r30, 0x35	; 53
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	90 7f       	andi	r25, 0xF0	; 240
    1b10:	80 91 6f 00 	lds	r24, 0x006F
    1b14:	89 2b       	or	r24, r25
    1b16:	8c 93       	st	X, r24
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ed 5b       	subi	r30, 0xBD	; 189
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e0       	ldi	r26, 0x00	; 0
    1b24:	b0 e4       	ldi	r27, 0x40	; 64
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	8e 01       	movw	r16, r28
    1b30:	01 5c       	subi	r16, 0xC1	; 193
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	ed 5b       	subi	r30, 0xBD	; 189
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a e7       	ldi	r20, 0x7A	; 122
    1b48:	55 e4       	ldi	r21, 0x45	; 69
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 83       	st	Z, r24
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	a2 83       	std	Z+2, r26	; 0x02
    1b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ff 96       	adiw	r30, 0x3f	; 63
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <lightning_7segments_in_parallel+0x236>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9e af       	std	Y+62, r25	; 0x3e
    1b7e:	8d af       	std	Y+61, r24	; 0x3d
    1b80:	46 c0       	rjmp	.+140    	; 0x1c0e <lightning_7segments_in_parallel+0x2c2>
	else if (__tmp > 65535)
    1b82:	fe 01       	movw	r30, r28
    1b84:	ff 96       	adiw	r30, 0x3f	; 63
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	64 f5       	brge	.+88     	; 0x1bf6 <lightning_7segments_in_parallel+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	ed 5b       	subi	r30, 0xBD	; 189
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e af       	std	Y+62, r25	; 0x3e
    1bca:	8d af       	std	Y+61, r24	; 0x3d
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <lightning_7segments_in_parallel+0x2a0>
    1bce:	80 e9       	ldi	r24, 0x90	; 144
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	9c af       	std	Y+60, r25	; 0x3c
    1bd4:	8b af       	std	Y+59, r24	; 0x3b
    1bd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <lightning_7segments_in_parallel+0x28e>
    1bde:	9c af       	std	Y+60, r25	; 0x3c
    1be0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9e af       	std	Y+62, r25	; 0x3e
    1bea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <lightning_7segments_in_parallel+0x282>
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <lightning_7segments_in_parallel+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ff 96       	adiw	r30, 0x3f	; 63
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e af       	std	Y+62, r25	; 0x3e
    1c0c:	8d af       	std	Y+61, r24	; 0x3d
    1c0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c12:	9a af       	std	Y+58, r25	; 0x3a
    1c14:	89 af       	std	Y+57, r24	; 0x39
    1c16:	89 ad       	ldd	r24, Y+57	; 0x39
    1c18:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <lightning_7segments_in_parallel+0x2ce>
    1c1e:	9a af       	std	Y+58, r25	; 0x3a
    1c20:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */

	PORTA = (PORTA & 0xC0) | 1<<PA3;				/* Open the 7 segment for minutes_counter0. */
    1c22:	ab e3       	ldi	r26, 0x3B	; 59
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	eb e3       	ldi	r30, 0x3B	; 59
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 7c       	andi	r24, 0xC0	; 192
    1c2e:	88 60       	ori	r24, 0x08	; 8
    1c30:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | minutes_counter0;		/* Increasing the counter and display it. */
    1c32:	a5 e3       	ldi	r26, 0x35	; 53
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e5 e3       	ldi	r30, 0x35	; 53
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	90 7f       	andi	r25, 0xF0	; 240
    1c40:	80 91 70 00 	lds	r24, 0x0070
    1c44:	89 2b       	or	r24, r25
    1c46:	8c 93       	st	X, r24
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e4       	ldi	r27, 0x40	; 64
    1c50:	8d ab       	std	Y+53, r24	; 0x35
    1c52:	9e ab       	std	Y+54, r25	; 0x36
    1c54:	af ab       	std	Y+55, r26	; 0x37
    1c56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	55 e4       	ldi	r21, 0x45	; 69
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	89 ab       	std	Y+49, r24	; 0x31
    1c72:	9a ab       	std	Y+50, r25	; 0x32
    1c74:	ab ab       	std	Y+51, r26	; 0x33
    1c76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <lightning_7segments_in_parallel+0x34e>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	98 ab       	std	Y+48, r25	; 0x30
    1c96:	8f a7       	std	Y+47, r24	; 0x2f
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <lightning_7segments_in_parallel+0x3cc>
	else if (__tmp > 65535)
    1c9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <lightning_7segments_in_parallel+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8f a7       	std	Y+47, r24	; 0x2f
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <lightning_7segments_in_parallel+0x3ae>
    1cdc:	80 e9       	ldi	r24, 0x90	; 144
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9e a7       	std	Y+46, r25	; 0x2e
    1ce2:	8d a7       	std	Y+45, r24	; 0x2d
    1ce4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <lightning_7segments_in_parallel+0x39c>
    1cec:	9e a7       	std	Y+46, r25	; 0x2e
    1cee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	98 ab       	std	Y+48, r25	; 0x30
    1cf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <lightning_7segments_in_parallel+0x390>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <lightning_7segments_in_parallel+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	69 a9       	ldd	r22, Y+49	; 0x31
    1d06:	7a a9       	ldd	r23, Y+50	; 0x32
    1d08:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	9c a7       	std	Y+44, r25	; 0x2c
    1d1e:	8b a7       	std	Y+43, r24	; 0x2b
    1d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <lightning_7segments_in_parallel+0x3d8>
    1d28:	9c a7       	std	Y+44, r25	; 0x2c
    1d2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */

	PORTA = (PORTA & 0xC0) | 1<<PA2;				/* Open the 7 segment for minutes_counter1. */
    1d2c:	ab e3       	ldi	r26, 0x3B	; 59
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e3       	ldi	r30, 0x3B	; 59
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 7c       	andi	r24, 0xC0	; 192
    1d38:	84 60       	ori	r24, 0x04	; 4
    1d3a:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | minutes_counter1;		/* Increasing the counter and display it. */
    1d3c:	a5 e3       	ldi	r26, 0x35	; 53
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e5 e3       	ldi	r30, 0x35	; 53
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	98 2f       	mov	r25, r24
    1d48:	90 7f       	andi	r25, 0xF0	; 240
    1d4a:	80 91 71 00 	lds	r24, 0x0071
    1d4e:	89 2b       	or	r24, r25
    1d50:	8c 93       	st	X, r24
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e4       	ldi	r27, 0x40	; 64
    1d5a:	8f a3       	std	Y+39, r24	; 0x27
    1d5c:	98 a7       	std	Y+40, r25	; 0x28
    1d5e:	a9 a7       	std	Y+41, r26	; 0x29
    1d60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6f a1       	ldd	r22, Y+39	; 0x27
    1d64:	78 a5       	ldd	r23, Y+40	; 0x28
    1d66:	89 a5       	ldd	r24, Y+41	; 0x29
    1d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8b a3       	std	Y+35, r24	; 0x23
    1d7c:	9c a3       	std	Y+36, r25	; 0x24
    1d7e:	ad a3       	std	Y+37, r26	; 0x25
    1d80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d82:	6b a1       	ldd	r22, Y+35	; 0x23
    1d84:	7c a1       	ldd	r23, Y+36	; 0x24
    1d86:	8d a1       	ldd	r24, Y+37	; 0x25
    1d88:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <lightning_7segments_in_parallel+0x458>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9a a3       	std	Y+34, r25	; 0x22
    1da0:	89 a3       	std	Y+33, r24	; 0x21
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <lightning_7segments_in_parallel+0x4d6>
	else if (__tmp > 65535)
    1da4:	6b a1       	ldd	r22, Y+35	; 0x23
    1da6:	7c a1       	ldd	r23, Y+36	; 0x24
    1da8:	8d a1       	ldd	r24, Y+37	; 0x25
    1daa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <lightning_7segments_in_parallel+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9a a3       	std	Y+34, r25	; 0x22
    1de2:	89 a3       	std	Y+33, r24	; 0x21
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <lightning_7segments_in_parallel+0x4b8>
    1de6:	80 e9       	ldi	r24, 0x90	; 144
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	98 a3       	std	Y+32, r25	; 0x20
    1dec:	8f 8f       	std	Y+31, r24	; 0x1f
    1dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df0:	98 a1       	ldd	r25, Y+32	; 0x20
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <lightning_7segments_in_parallel+0x4a6>
    1df6:	98 a3       	std	Y+32, r25	; 0x20
    1df8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9a a3       	std	Y+34, r25	; 0x22
    1e02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	89 a1       	ldd	r24, Y+33	; 0x21
    1e06:	9a a1       	ldd	r25, Y+34	; 0x22
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <lightning_7segments_in_parallel+0x49a>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <lightning_7segments_in_parallel+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e10:	7c a1       	ldd	r23, Y+36	; 0x24
    1e12:	8d a1       	ldd	r24, Y+37	; 0x25
    1e14:	9e a1       	ldd	r25, Y+38	; 0x26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	9e 8f       	std	Y+30, r25	; 0x1e
    1e28:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <lightning_7segments_in_parallel+0x4e2>
    1e32:	9e 8f       	std	Y+30, r25	; 0x1e
    1e34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */

	PORTA = (PORTA & 0xC0) | 1<<PA1;				/* Open the 7 segment for hours_counter0. */
    1e36:	ab e3       	ldi	r26, 0x3B	; 59
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e3       	ldi	r30, 0x3B	; 59
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 7c       	andi	r24, 0xC0	; 192
    1e42:	82 60       	ori	r24, 0x02	; 2
    1e44:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | hours_counter0;		/* Increasing the counter and display it. */
    1e46:	a5 e3       	ldi	r26, 0x35	; 53
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e3       	ldi	r30, 0x35	; 53
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	98 2f       	mov	r25, r24
    1e52:	90 7f       	andi	r25, 0xF0	; 240
    1e54:	80 91 72 00 	lds	r24, 0x0072
    1e58:	89 2b       	or	r24, r25
    1e5a:	8c 93       	st	X, r24
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e4       	ldi	r27, 0x40	; 64
    1e64:	89 8f       	std	Y+25, r24	; 0x19
    1e66:	9a 8f       	std	Y+26, r25	; 0x1a
    1e68:	ab 8f       	std	Y+27, r26	; 0x1b
    1e6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	55 e4       	ldi	r21, 0x45	; 69
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8d 8b       	std	Y+21, r24	; 0x15
    1e86:	9e 8b       	std	Y+22, r25	; 0x16
    1e88:	af 8b       	std	Y+23, r26	; 0x17
    1e8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <lightning_7segments_in_parallel+0x562>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 8b       	std	Y+20, r25	; 0x14
    1eaa:	8b 8b       	std	Y+19, r24	; 0x13
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <lightning_7segments_in_parallel+0x5e0>
	else if (__tmp > 65535)
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <lightning_7segments_in_parallel+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <lightning_7segments_in_parallel+0x5c2>
    1ef0:	80 e9       	ldi	r24, 0x90	; 144
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
    1ef8:	89 89       	ldd	r24, Y+17	; 0x11
    1efa:	9a 89       	ldd	r25, Y+18	; 0x12
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <lightning_7segments_in_parallel+0x5b0>
    1f00:	9a 8b       	std	Y+18, r25	; 0x12
    1f02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8b 89       	ldd	r24, Y+19	; 0x13
    1f06:	9c 89       	ldd	r25, Y+20	; 0x14
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	9c 89       	ldd	r25, Y+20	; 0x14
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <lightning_7segments_in_parallel+0x5a4>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <lightning_7segments_in_parallel+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9c 8b       	std	Y+20, r25	; 0x14
    1f2a:	8b 8b       	std	Y+19, r24	; 0x13
    1f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
    1f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f36:	98 89       	ldd	r25, Y+16	; 0x10
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <lightning_7segments_in_parallel+0x5ec>
    1f3c:	98 8b       	std	Y+16, r25	; 0x10
    1f3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */

	PORTA = (PORTA & 0xC0) | 1<<PA0;				/* Open the 7 segment for hours_counter. */
    1f40:	ab e3       	ldi	r26, 0x3B	; 59
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	eb e3       	ldi	r30, 0x3B	; 59
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 7c       	andi	r24, 0xC0	; 192
    1f4c:	81 60       	ori	r24, 0x01	; 1
    1f4e:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | hours_counter1;		/* Increasing the counter and display it. */
    1f50:	a5 e3       	ldi	r26, 0x35	; 53
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e5 e3       	ldi	r30, 0x35	; 53
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	90 7f       	andi	r25, 0xF0	; 240
    1f5e:	80 91 73 00 	lds	r24, 0x0073
    1f62:	89 2b       	or	r24, r25
    1f64:	8c 93       	st	X, r24
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e4       	ldi	r27, 0x40	; 64
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a e7       	ldi	r20, 0x7A	; 122
    1f84:	55 e4       	ldi	r21, 0x45	; 69
    1f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <lightning_7segments_in_parallel+0x66c>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <lightning_7segments_in_parallel+0x6ea>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <lightning_7segments_in_parallel+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <lightning_7segments_in_parallel+0x6cc>
    1ffa:	80 e9       	ldi	r24, 0x90	; 144
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <lightning_7segments_in_parallel+0x6ba>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <lightning_7segments_in_parallel+0x6ae>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <lightning_7segments_in_parallel+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <lightning_7segments_in_parallel+0x6f6>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_7SEGMETS);						/* Delay to keep other turned on. */
}
    204a:	cc 5a       	subi	r28, 0xAC	; 172
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret

00002062 <main>:

int main(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	SREG |= 1<<I_BIT;	/* Enabling I bit. */
    206a:	af e5       	ldi	r26, 0x5F	; 95
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	ef e5       	ldi	r30, 0x5F	; 95
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 68       	ori	r24, 0x80	; 128
    2076:	8c 93       	st	X, r24

	timre1_init();		/* Turn on timer1 as time counter. */
    2078:	0e 94 24 07 	call	0xe48	; 0xe48 <timre1_init>
	int0_reset_init();	/* Turn in INT0 with falling edge. */
    207c:	0e 94 44 07 	call	0xe88	; 0xe88 <int0_reset_init>
	int1_pause_init();	/* Turn in INT1 with raising edge. */
    2080:	0e 94 59 07 	call	0xeb2	; 0xeb2 <int1_pause_init>
	int2_resume_init();	/* Turn in INT2 with falling edge. */
    2084:	0e 94 6e 07 	call	0xedc	; 0xedc <int2_resume_init>

	DDRA |= 0x3F;		/* Making first 6 pins in PORTA output for turning on 7 segments. */
    2088:	aa e3       	ldi	r26, 0x3A	; 58
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	ea e3       	ldi	r30, 0x3A	; 58
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8f 63       	ori	r24, 0x3F	; 63
    2094:	8c 93       	st	X, r24
	PORTA &= 0xC0;		/* It will out zero in the beginning. */
    2096:	ab e3       	ldi	r26, 0x3B	; 59
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	eb e3       	ldi	r30, 0x3B	; 59
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 7c       	andi	r24, 0xC0	; 192
    20a2:	8c 93       	st	X, r24

	DDRB = 0x00;		/* Making all pins in PORTB input for buttons. */
    20a4:	e7 e3       	ldi	r30, 0x37	; 55
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	10 82       	st	Z, r1
	PORTB = 0xFF;		/* Enabling internal pull up resistor. */
    20aa:	e8 e3       	ldi	r30, 0x38	; 56
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	80 83       	st	Z, r24

	DDRC |= 0x0F;		/* Making first 4 pins in PORTC output pins for counting. */
    20b2:	a4 e3       	ldi	r26, 0x34	; 52
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e4 e3       	ldi	r30, 0x34	; 52
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 60       	ori	r24, 0x0F	; 15
    20be:	8c 93       	st	X, r24
	PORTC &= 0xF0;		/* It will out zero in the beginning. */
    20c0:	a5 e3       	ldi	r26, 0x35	; 53
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e3       	ldi	r30, 0x35	; 53
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 7f       	andi	r24, 0xF0	; 240
    20cc:	8c 93       	st	X, r24
	/*
	 * Making PD0 output pin for buzzer.
	 * Making PD2 and PD3 input pins for RESET and PAUSE and enable internal pull up resistance for PD3.
	 * Making PD4 and PD5 output pins for 2 mode LEDs.
	 */
	DDRD = 0x31;
    20ce:	e1 e3       	ldi	r30, 0x31	; 49
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	81 e3       	ldi	r24, 0x31	; 49
    20d4:	80 83       	st	Z, r24
	PORTD = 0x14;
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	84 e1       	ldi	r24, 0x14	; 20
    20dc:	80 83       	st	Z, r24

	while(1)
	{
		lightning_7segments_in_parallel();		/* Displaying numbers on all 7 segments always. */
    20de:	0e 94 a6 0c 	call	0x194c	; 0x194c <lightning_7segments_in_parallel>
		increment_hours();						/* For incrementing hours using button. */
    20e2:	0e 94 7c 07 	call	0xef8	; 0xef8 <increment_hours>
		decrement_hours();						/* For decrementing hours using button. */
    20e6:	0e 94 3b 08 	call	0x1076	; 0x1076 <decrement_hours>
		increment_minutes();					/* For incrementing minutes using button. */
    20ea:	0e 94 fe 08 	call	0x11fc	; 0x11fc <increment_minutes>
		decrement_minutes();					/* For decrementing minutes using button. */
    20ee:	0e 94 b6 09 	call	0x136c	; 0x136c <decrement_minutes>
		increment_seconds();					/* For incrementing seconds using button. */
    20f2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <increment_seconds>
		decrement_seconds();					/* For decrementing seconds using button. */
    20f6:	0e 94 31 0b 	call	0x1662	; 0x1662 <decrement_seconds>
		mode_toggle();							/* For toggling mode using button */
    20fa:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <mode_toggle>
    20fe:	ef cf       	rjmp	.-34     	; 0x20de <main+0x7c>

00002100 <__prologue_saves__>:
    2100:	2f 92       	push	r2
    2102:	3f 92       	push	r3
    2104:	4f 92       	push	r4
    2106:	5f 92       	push	r5
    2108:	6f 92       	push	r6
    210a:	7f 92       	push	r7
    210c:	8f 92       	push	r8
    210e:	9f 92       	push	r9
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	ca 1b       	sub	r28, r26
    212a:	db 0b       	sbc	r29, r27
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	09 94       	ijmp

00002138 <__epilogue_restores__>:
    2138:	2a 88       	ldd	r2, Y+18	; 0x12
    213a:	39 88       	ldd	r3, Y+17	; 0x11
    213c:	48 88       	ldd	r4, Y+16	; 0x10
    213e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2140:	6e 84       	ldd	r6, Y+14	; 0x0e
    2142:	7d 84       	ldd	r7, Y+13	; 0x0d
    2144:	8c 84       	ldd	r8, Y+12	; 0x0c
    2146:	9b 84       	ldd	r9, Y+11	; 0x0b
    2148:	aa 84       	ldd	r10, Y+10	; 0x0a
    214a:	b9 84       	ldd	r11, Y+9	; 0x09
    214c:	c8 84       	ldd	r12, Y+8	; 0x08
    214e:	df 80       	ldd	r13, Y+7	; 0x07
    2150:	ee 80       	ldd	r14, Y+6	; 0x06
    2152:	fd 80       	ldd	r15, Y+5	; 0x05
    2154:	0c 81       	ldd	r16, Y+4	; 0x04
    2156:	1b 81       	ldd	r17, Y+3	; 0x03
    2158:	aa 81       	ldd	r26, Y+2	; 0x02
    215a:	b9 81       	ldd	r27, Y+1	; 0x01
    215c:	ce 0f       	add	r28, r30
    215e:	d1 1d       	adc	r29, r1
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	ed 01       	movw	r28, r26
    216c:	08 95       	ret

0000216e <_exit>:
    216e:	f8 94       	cli

00002170 <__stop_program>:
    2170:	ff cf       	rjmp	.-2      	; 0x2170 <__stop_program>
